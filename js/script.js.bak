const weatherApp = {

	data: null,
	distanceUnitsLg: `mi`,
	distanceUnitsMed: `ft`,
	distanceUnitsSm: `in`,

	elements: {
		currentIcon: document.getElementsByClassName(`currentWeatherIcon`),
		currentTemp: document.getElementsByClassName(`currentDegrees`),
		head: document.getElementsByTagName(`head`),
		locale: document.getElementsByClassName(`locale`),
		title: document.getElementsByTagName(`title`),
		weatherScript: document.createElement(`script`),
	},

	getWeather() {
		const cacheBusterNum = 999999;
		const searchTerms = document.querySelector(`[name="searchBox"]`).value;

		const apiBaseUrl = `https://api.wunderground.com/api`;
		const apiKey = `6b31203be6673bed`;
		const apiFeatures = `conditions`;
		const query = searchTerms || `autoip`;
		const apiRequestId = `requestId=${Math.floor(Math.random() * cacheBusterNum).toString()}`; // 'cache-buster'

		const apiFinalUrl = `${apiBaseUrl}/${apiKey}/${apiFeatures}/q/${query}.json?${apiRequestId}`;

		return fetch(apiFinalUrl)
			.then((data)=> {
				return data.json();
			});
	},

	pressureUnits: `in`,

	setWeather() {
		weatherApp.getWeather()
			.then((data)=> {
				const tags = weatherApp.elements;

				const iconUrlSwitch = new RegExp(/[a-z]{1}\/([^/]*$)/, ``);
				const dataStart = data.current_observation;
				const iconUrl = `${dataStart.icon_url
					.replace(iconUrlSwitch, `i/$1`)}`;

				weatherApp.data = data;

				tags.currentIcon[0].src = `${iconUrl}`;

				tags.title[0].innerHTML = `WeatherApp - ${dataStart.display_location.full}`;

				tags.locale[0].getElementsByClassName(`location`)[0].innerHTML = `${dataStart.display_location.full}`;

				tags.locale[0].getElementsByClassName(`latitude`)[0].innerHTML = `↕ Latitude: ${Number(dataStart.display_location.latitude).toFixed(2)}`;

				tags.locale[0].getElementsByClassName(`longitude`)[0].innerHTML = `↔ Longitude: ${Number(dataStart.display_location.longitude).toFixed(2)}`;

				tags.locale[0].getElementsByClassName(`conditions`)[0].innerHTML = `Conditions: ${dataStart.weather}`;

				tags.locale[0].getElementsByClassName(`humidity`)[0].innerHTML = `Humidity: ${dataStart.relative_humidity}`;

				if (this.temperatureUnits !== `C`) {
					tags.currentTemp[0].innerHTML = `${Number(dataStart.temp_f).toFixed()}`;

					tags.locale[0].getElementsByClassName(`elevation`)[0].innerHTML = `↑ Elevation: ${Number(dataStart.display_location.elevation * 3.28084).toFixed()} ${weatherApp.distanceUnitsMed}`;

					tags.locale[0].getElementsByClassName(`wind`)[0].innerHTML = `Wind: ${dataStart.wind_dir}, ${dataStart.wind_mph} ${weatherApp.speedUnits}`;

					tags.locale[0].getElementsByClassName(`pressure`)[0].innerHTML = `Pressure: ${dataStart.pressure_in} ${weatherApp.pressureUnits}`;

					tags.locale[0].getElementsByClassName(`dewpoint`)[0].innerHTML = `Dewpoint: ${dataStart.dewpoint_f}`;

					tags.locale[0].getElementsByClassName(`windchill`)[0].innerHTML = `Wind Chill: ${dataStart.windchill_f}`;

					tags.locale[0].getElementsByClassName(`feelslike`)[0].innerHTML = `Feels Like: ${dataStart.feelslike_f}`;

					tags.locale[0].getElementsByClassName(`visibility`)[0].innerHTML = `Visibility: ${dataStart.visibility_mi} ${weatherApp.distanceUnitsLg}`;

					tags.locale[0].getElementsByClassName(`precipitation`)[0].innerHTML = `Precipitation: ${dataStart.precip_today_in} ${weatherApp.distanceUnitsSm}`;
				} else {
					tags.currentTemp[0].innerHTML = `${Number(dataStart.temp_c).toFixed()}`;

					tags.locale[0].getElementsByClassName(`elevation`)[0].innerHTML = `↑ Elevation: ${Number(dataStart.display_location.elevation).toFixed()} ${weatherApp.distanceUnitsMed}`;

					tags.locale[0].getElementsByClassName(`wind`)[0].innerHTML = `Wind: ${dataStart.wind_dir}, ${dataStart.wind_kph} ${weatherApp.speedUnits}`;

					tags.locale[0].getElementsByClassName(`pressure`)[0].innerHTML = `Pressure: ${dataStart.pressure_mb} ${weatherApp.pressureUnits}`;

					tags.locale[0].getElementsByClassName(`dewpoint`)[0].innerHTML = `Dewpoint: ${dataStart.dewpoint_c}`;

					tags.locale[0].getElementsByClassName(`windchill`)[0].innerHTML = `Wind Chill: ${dataStart.windchill_c}`;

					tags.locale[0].getElementsByClassName(`feelslike`)[0].innerHTML = `Feels Like: ${dataStart.feelslike_c}`;

					tags.locale[0].getElementsByClassName(`visibility`)[0].innerHTML = `Visibility: ${dataStart.visibility_km} ${weatherApp.distanceUnitsLg}`;

					tags.locale[0].getElementsByClassName(`precipitation`)[0].innerHTML = `Precipitation: ${dataStart.precip_today_metric} ${weatherApp.distanceUnitsSm}`;
				}
			});
	},

	speedUnits: `mph`,
	temperature: 0,
	temperatureUnits: `F`,

	toggleTempType() {
		const convert = document.querySelector(`.convert`);
		const dataStart = this.data.current_observation;

		if (this.temperatureUnits === `C`) {
			this.temperature = dataStart.temp_f;
			this.temperatureUnits = `F`;
			this.distanceUnitsLg = `mi`;
			this.distanceUnitsMed = `ft`;
			this.distanceUnitsSm = `in`;
			this.pressureUnits = `in`;
			this.speedUnits = `mph`;
			convert.innerHTML = `Convert to &deg;C (Metric)`;
		} else {
			this.temperature = dataStart.temp_c;
			this.temperatureUnits = `C`;
			this.distanceUnitsLg = `km`;
			this.distanceUnitsMed = `m`;
			this.distanceUnitsSm = `cm`;
			this.pressureUnits = `mb`;
			this.speedUnits = `kph`;
			convert.innerHTML = `Convert to &deg;F (Emperial)`;
		}

		this.updateTemp();
	},

	updateTemp() {
		const currentDegrees = document.querySelector(`.currentDegrees`);
		const degreeType = document.getElementsByClassName(`degreeType`);

		currentDegrees.innerHTML = this.temperature.toFixed(0);
		Array.from(degreeType).forEach((index)=> {
			index.innerHTML = this.temperatureUnits;
		});
	},
};

window.onload = weatherApp.setWeather;

// console.clear();


// promise / fetch
// async

// study practice build refactor repeat

// search sort big-O-notation
